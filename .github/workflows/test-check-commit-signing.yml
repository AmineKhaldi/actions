name: test-check-commit-signing

on:
  push:
    branches:
    - main
    tags:
    - '**'
  pull_request:
    branches:
    - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

env:
  GIT_TRACE: 1

jobs:
  test:
    name: ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: macOS
            matrix: macos
            runs-on: macos-latest
          - name: Ubuntu
            matrix: ubuntu
            runs-on: ubuntu-latest
          - name: Windows
            matrix: windows
            runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup git
      shell: bash
      run: |
        # TODO: but this means the local uses: references below don't use the merge
        git checkout '${{ github.event.pull_request.head.sha }}'
        git config --local user.email "test@example.com"
        git config --local user.name "Test Committer"

    - name: Setup GPG signing
      shell: bash
      run: |
        git config gpg.format openpgp
        git config commit.gpgsign true
        # key created by:
        # gpg --generate-key --batch check-commit-signing/gpg_key_script
        # gpg --list-secret-keys --keyid-format long | sed -n 's;^sec .*/\([^ ]\+\) .*;\1;p' > gpg_key
        git config user.signingKey 03FAE97C9F159187
        # TODO: but doesn't it need the full secret key and this is just an identifier for that?

    - name: Create GPG signed commit
      id: gpg_signed_commit
      shell: bash
      run: |
         git commit --gpg-sign --allow-empty -m 'gpg signed commit for testing'

    - name: Clear signing configuration
      shell: bash
      run: |
        git config commit.gpgsign false
        git config user.signingKey ''

    - name: Check GPG signed commit
      uses: ./check-commit-signing/
      with:
        source: ${{ steps.gpg_signed_commit.outputs.commit_hash }}

    - name: Setup SSH signing
      shell: bash
      run: |
        git config gpg.format ssh
        git config commit.gpgsign true
        # key created by:
        # ssh-keygen -t ed25519 -C 'test' -f ssh_keyfile -N justtesting
        # cat ssh_keyfile.pub
        git config user.signingKey ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHtMirnQ7ggCOHz8THdO03fLFzrJychk468PaoSK6Cn1 test
        # TODO: but doesn't it need the full secret key and this is just an identifier for that?

    - name: Create SSH signed commit
      id: ssh_signed_commit
      shell: bash
      run: |
         git commit --gpg-sign --allow-empty -m 'ssh signed commit for testing'

    - name: Clear signing configuration
      shell: bash
      run: |
        git config commit.gpgsign false
        git config user.signingKey ''

    - name: Check SSH signed commit
      uses: ./check-commit-signing/
      with:
        source: ${{ steps.ssh_signed_commit.outputs.commit_hash }}

    - name: Clear signing configuration
      shell: bash
      run: |
        git config commit.gpgsign false
        git config user.signingKey ''

    - name: Create unsigned commit
      id: unsigned_commit
      shell: bash
      run: |
        git commit --no-gpg-sign --allow-empty -m 'unsigned commit for testing'
        echo "commit_hash=$(git rev-parse HEAD)" >> "${GITHUB_OUTPUT}"

    - name: Check unsigned commit
      id: failure_check
      continue-on-error: true
      uses: ./check-commit-signing/
      with:
        source: ${{ steps.unsigned_commit.outputs.commit_hash }}

    - name: Make sure unsigned check failed
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.failure_check.outputs.status }}" == "unsigned" ]
        then
          true
        else
          false
        fi
